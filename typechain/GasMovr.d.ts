/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface GasMovrInterface extends ethers.utils.Interface {
  functions: {
    "addRoutes(tuple[])": FunctionFragment;
    "batchSendNativeToken(address[],uint256[],bytes32[],uint256,uint256)": FunctionFragment;
    "chainConfig(uint256)": FunctionFragment;
    "depositNativeToken(uint256,address)": FunctionFragment;
    "getChainData(uint256)": FunctionFragment;
    "grantSenderRole(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "processedHashes(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeSenderRole(address)": FunctionFragment;
    "sendNativeToken(address,uint256,bytes32,uint256,uint256)": FunctionFragment;
    "senders(address)": FunctionFragment;
    "setIsEnabled(uint256,bool)": FunctionFragment;
    "setPause()": FunctionFragment;
    "setUnPause()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawBalance(address,uint256)": FunctionFragment;
    "withdrawFullBalance(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRoutes",
    values: [{ chainId: BigNumberish; isEnabled: boolean }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSendNativeToken",
    values: [string[], BigNumberish[], BytesLike[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNativeToken",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantSenderRole",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processedHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSenderRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendNativeToken",
    values: [string, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "senders", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setIsEnabled",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setPause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setUnPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFullBalance",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addRoutes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchSendNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantSenderRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processedHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeSenderRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "senders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUnPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFullBalance",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "Donation(address,uint256)": EventFragment;
    "GrantSender(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RevokeSender(address)": EventFragment;
    "Send(address,uint256,bytes32)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdrawal(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Donation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantSender"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeSender"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Send"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    destinationReceiver: string;
    amount: BigNumber;
    destinationChainId: BigNumber;
  }
>;

export type DonationEvent = TypedEvent<
  [string, BigNumber] & { sender: string; amount: BigNumber }
>;

export type GrantSenderEvent = TypedEvent<[string] & { sender: string }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RevokeSenderEvent = TypedEvent<[string] & { sender: string }>;

export type SendEvent = TypedEvent<
  [string, BigNumber, string] & {
    receiver: string;
    amount: BigNumber;
    srcChainTxHash: string;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type WithdrawalEvent = TypedEvent<
  [string, BigNumber] & { receiver: string; amount: BigNumber }
>;

export class GasMovr extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GasMovrInterface;

  functions: {
    addRoutes(
      _routes: { chainId: BigNumberish; isEnabled: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchSendNativeToken(
      receivers: string[],
      amounts: BigNumberish[],
      srcChainTxHashes: BytesLike[],
      perUserGasAmount: BigNumberish,
      maxLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chainConfig(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { chainId: BigNumber; isEnabled: boolean }
    >;

    depositNativeToken(
      destinationChainId: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChainData(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, boolean] & { chainId: BigNumber; isEnabled: boolean }]
    >;

    grantSenderRole(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    processedHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeSenderRole(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendNativeToken(
      receiver: string,
      amount: BigNumberish,
      srcChainTxHash: BytesLike,
      perUserGasAmount: BigNumberish,
      maxLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    senders(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    setIsEnabled(
      chainId: BigNumberish,
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBalance(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFullBalance(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addRoutes(
    _routes: { chainId: BigNumberish; isEnabled: boolean }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchSendNativeToken(
    receivers: string[],
    amounts: BigNumberish[],
    srcChainTxHashes: BytesLike[],
    perUserGasAmount: BigNumberish,
    maxLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chainConfig(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { chainId: BigNumber; isEnabled: boolean }>;

  depositNativeToken(
    destinationChainId: BigNumberish,
    _to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChainData(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { chainId: BigNumber; isEnabled: boolean }>;

  grantSenderRole(
    sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  processedHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeSenderRole(
    sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendNativeToken(
    receiver: string,
    amount: BigNumberish,
    srcChainTxHash: BytesLike,
    perUserGasAmount: BigNumberish,
    maxLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  senders(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  setIsEnabled(
    chainId: BigNumberish,
    _isEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnPause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBalance(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFullBalance(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addRoutes(
      _routes: { chainId: BigNumberish; isEnabled: boolean }[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchSendNativeToken(
      receivers: string[],
      amounts: BigNumberish[],
      srcChainTxHashes: BytesLike[],
      perUserGasAmount: BigNumberish,
      maxLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    chainConfig(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { chainId: BigNumber; isEnabled: boolean }
    >;

    depositNativeToken(
      destinationChainId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getChainData(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { chainId: BigNumber; isEnabled: boolean }
    >;

    grantSenderRole(sender: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    processedHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeSenderRole(sender: string, overrides?: CallOverrides): Promise<void>;

    sendNativeToken(
      receiver: string,
      amount: BigNumberish,
      srcChainTxHash: BytesLike,
      perUserGasAmount: BigNumberish,
      maxLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    senders(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    setIsEnabled(
      chainId: BigNumberish,
      _isEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setPause(overrides?: CallOverrides): Promise<boolean>;

    setUnPause(overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBalance(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFullBalance(_to: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256,uint256)"(
      destinationReceiver?: string | null,
      amount?: null,
      destinationChainId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        destinationReceiver: string;
        amount: BigNumber;
        destinationChainId: BigNumber;
      }
    >;

    Deposit(
      destinationReceiver?: string | null,
      amount?: null,
      destinationChainId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        destinationReceiver: string;
        amount: BigNumber;
        destinationChainId: BigNumber;
      }
    >;

    "Donation(address,uint256)"(
      sender?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    Donation(
      sender?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    "GrantSender(address)"(
      sender?: null
    ): TypedEventFilter<[string], { sender: string }>;

    GrantSender(sender?: null): TypedEventFilter<[string], { sender: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "RevokeSender(address)"(
      sender?: null
    ): TypedEventFilter<[string], { sender: string }>;

    RevokeSender(sender?: null): TypedEventFilter<[string], { sender: string }>;

    "Send(address,uint256,bytes32)"(
      receiver?: null,
      amount?: null,
      srcChainTxHash?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { receiver: string; amount: BigNumber; srcChainTxHash: string }
    >;

    Send(
      receiver?: null,
      amount?: null,
      srcChainTxHash?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { receiver: string; amount: BigNumber; srcChainTxHash: string }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Withdrawal(address,uint256)"(
      receiver?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; amount: BigNumber }
    >;

    Withdrawal(
      receiver?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    addRoutes(
      _routes: { chainId: BigNumberish; isEnabled: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchSendNativeToken(
      receivers: string[],
      amounts: BigNumberish[],
      srcChainTxHashes: BytesLike[],
      perUserGasAmount: BigNumberish,
      maxLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chainConfig(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositNativeToken(
      destinationChainId: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChainData(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantSenderRole(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    processedHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeSenderRole(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendNativeToken(
      receiver: string,
      amount: BigNumberish,
      srcChainTxHash: BytesLike,
      perUserGasAmount: BigNumberish,
      maxLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    senders(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setIsEnabled(
      chainId: BigNumberish,
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBalance(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFullBalance(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRoutes(
      _routes: { chainId: BigNumberish; isEnabled: boolean }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchSendNativeToken(
      receivers: string[],
      amounts: BigNumberish[],
      srcChainTxHashes: BytesLike[],
      perUserGasAmount: BigNumberish,
      maxLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chainConfig(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositNativeToken(
      destinationChainId: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChainData(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantSenderRole(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processedHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeSenderRole(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendNativeToken(
      receiver: string,
      amount: BigNumberish,
      srcChainTxHash: BytesLike,
      perUserGasAmount: BigNumberish,
      maxLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    senders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setIsEnabled(
      chainId: BigNumberish,
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBalance(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFullBalance(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
